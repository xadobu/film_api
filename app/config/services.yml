# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
#    kernel.subscriber.filmMySQLListerner:
#        class: FilmApi\Component\Film\Application\EventListener\FilmListener
#        arguments:
#            entityManager: '@doctrine.orm.entity_manager'

    createFilmDoctrineListener:
        class: FilmApi\Component\Film\Application\EventListener\CreateFilmDoctrineListener
        arguments:
            entityManager: '@doctrine.orm.entity_manager'
        tags:
            - { name: kernel.event_listener, event: film.created}

    updateFilmDoctrineListener:
        class: FilmApi\Component\Film\Application\EventListener\UpdateFilmDoctrineListener
        arguments:
            entityManager: '@doctrine.orm.entity_manager'
        tags:
            - { name: kernel.event_listener, event: film.updated }
    deleteFilmDoctrineListener:
        class: FilmApi\Component\Film\Application\EventListener\DeleteFilmDoctrineListener
        arguments:
            entityManager: '@doctrine.orm.entity_manager'
        tags:
            - { name: kernel.event_listener, event: film.deleted }


    createFilmUseCase:
        class: FilmApi\Component\Film\Application\Service\CreateFilm\CreateFilmUseCase
        arguments:
            eventDispatcherInterface: '@event_dispatcher'

    listFilmsUseCase:
        class: FilmApi\Component\Film\Application\Service\ListFilms\ListFilmsUseCase
        arguments:
            eventDispatcherInterface: '@event_dispatcher'
            entityManager: '@doctrine.orm.entity_manager'

    updateFilmUseCase:
        class: FilmApi\Component\Film\Application\Service\UpdateFilm\UpdateFilmUseCase
        arguments:
            eventDispatcherInterface: '@event_dispatcher'

    deleteFilmUseCase:
        class: FilmApi\Component\Film\Application\Service\DeleteFilm\DeleteFilmUseCase
        arguments:
            eventDispatcherInterface: '@event_dispatcher'

    filmCacheService:
        class:
        decorates: listFilmsUseCase
        decoration_inner_name: listFilm.old
        arguments: ["@listFilm.old"]
